console.log('üìù [DEBUG] Loading config...');
let config, app, connectDB;

try {
  config = require('./config/config');
  console.log('üìù [DEBUG] Config loaded successfully');
  console.log('üìù [DEBUG] Port:', config.port);
  console.log('üìù [DEBUG] Environment:', config.env);
  console.log('üìù [DEBUG] MongoDB URI:', config.db.uri ? 'Set' : 'Not set');
} catch (error) {
  console.error('‚ùå [ERROR] Failed to load config:', error.message);
  console.error('Stack:', error.stack);
  process.exit(1);
}

console.log('üìù [DEBUG] Loading app...');
try {
  app = require('./app');
  console.log('üìù [DEBUG] App loaded successfully');
} catch (error) {
  console.error('‚ùå [ERROR] Failed to load app:', error.message);
  console.error('Stack:', error.stack);
  process.exit(1);
}

console.log('üìù [DEBUG] Loading database utils...');
try {
  ({ connectDB } = require('./utils/db'));
  console.log('üìù [DEBUG] Database utils loaded successfully');
} catch (error) {
  console.error('‚ùå [ERROR] Failed to load database utils:', error.message);
  console.error('Stack:', error.stack);
  process.exit(1);
}

console.log('üìù [DEBUG] Loading realtime service...');
try {
  const realtimeService = require('./services/realtime.service');
  console.log('üìù [DEBUG] Realtime service loaded successfully');
} catch (error) {
  console.error('‚ùå [ERROR] Failed to load realtime service:', error.message);
  console.error('Stack:', error.stack);
  process.exit(1);
}

console.log('üîß D√©marrage du serveur...');
console.log(`‚öôÔ∏è  Environnement: ${config.env}`);
console.log(`üîó Port: ${config.port}`);
console.log(`üåê URL de l'API: http://localhost:${config.port}${config.api.prefix}`);

// D√©marrer le serveur
const startServer = async () => {
  let dbConnection = null;
  
  try {
    console.log('üìù [DEBUG] Starting server function...');
    console.log('üîÑ Connexion √† la base de donn√©es...');
    
    // Tenter de se connecter √† la base de donn√©es
    console.log('üìù [DEBUG] About to call connectDB...');
    dbConnection = await connectDB();
    
    if (dbConnection) {
      console.log('üìù [DEBUG] connectDB completed successfully');
      console.log('‚úÖ Base de donn√©es connect√©e - toutes les fonctionnalit√©s disponibles');
    } else {
      console.log('‚ö†Ô∏è  Serveur d√©marr√© sans connexion √† la base de donn√©es');
      console.log('   Certaines fonctionnalit√©s seront limit√©es');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la connexion √† la base de donn√©es:', error.message);
    console.log('‚ö†Ô∏è  Le serveur va d√©marrer sans base de donn√©es');
    console.log('   Certaines fonctionnalit√©s seront indisponibles');
  }
  
  try {
    console.log('üöÄ D√©marrage du serveur HTTP...');
    console.log('üìù [DEBUG] App object:', typeof app);
    console.log('üìù [DEBUG] Config port:', config.port);
    
    // D√©marrer le serveur m√™me sans connexion DB
    const server = app.listen(config.port, '0.0.0.0', () => {
      console.log(`‚úÖ Serveur d√©marr√© avec succ√®s sur le port ${config.port}`);
      console.log(`üåç Environnement: ${config.env}`);
      console.log(`üì° API disponible √† http://localhost:${config.port}${config.api.prefix}`);
      console.log(`üìö Documentation Swagger: http://localhost:${config.port}${config.api.prefix}/api-docs`);
      
      // Initialiser le service de notifications temps r√©el
      try {
        const realtimeService = require('./services/realtime.service');
        realtimeService.initialize(server);
        console.log(`üî¥ WebSocket disponible √† ws://localhost:${config.port}/ws`);
      } catch (error) {
        console.error('‚ùå Erreur initialisation WebSocket:', error.message);
      }
      
      if (!dbConnection) {
        console.log('‚ö†Ô∏è  ATTENTION: Base de donn√©es non connect√©e!');
        console.log('   Configurez MONGODB_URI pour activer toutes les fonctionnalit√©s');
      }
    });

    console.log('üìù [DEBUG] Server listen called, waiting for callback...');

    // Gestion des erreurs du serveur
    server.on('error', (error) => {
      console.error('‚ùå [SERVER ERROR]:', error.message);
      if (error.code === 'EADDRINUSE') {
        console.error(`Le port ${config.port} est d√©j√† utilis√©`);
      }
      process.exit(1);
    });

    // Gestion des erreurs non captur√©es
    process.on('unhandledRejection', (err) => {
      console.error('‚ùå [UNHANDLED REJECTION]:', err);
      if (server) {
        server.close(() => process.exit(1));
      } else {
        process.exit(1);
      }
    });
    
    return server;
  } catch (error) {
    console.error('‚ùå √âchec du d√©marrage du serveur:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
};

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (err) => {
  console.error('Exception non g√©r√©e:', err);
  process.exit(1);
});

// D√©marrer le serveur
startServer();

// Gestion de la sortie du processus
process.on('SIGTERM', () => {
  console.log('üëã SIGTERM re√ßu. Arr√™t en cours...');
  if (server) {
    server.close(() => {
      console.log('Processus termin√©');
      process.exit(0);
    });
  } else {
    process.exit(0);
  }
});
