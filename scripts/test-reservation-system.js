const mongoose = require('mongoose');
const config = require('../src/config/config');
const TimeSlot = require('../src/models/timeSlot.model');
const Appointment = require('../src/models/appointment.model');
const Order = require('../src/models/order.model');
const Client = require('../src/models/client.model');
const Pressing = require('../src/models/pressing.model');

/**
 * Script de test pour valider le syst√®me de r√©servation GeoPressCI
 * 
 * Ce script teste :
 * 1. Cr√©ation de cr√©neaux horaires
 * 2. Cr√©ation de rendez-vous
 * 3. Int√©gration avec les commandes
 * 4. Gestion des conflits et disponibilit√©s
 */

async function connectToDatabase() {
  try {
    await mongoose.connect(config.database.uri);
    console.log('‚úÖ Connexion √† MongoDB r√©ussie');
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† MongoDB:', error.message);
    process.exit(1);
  }
}

async function testTimeSlotCreation() {
  console.log('\nüß™ Test 1: Cr√©ation de cr√©neaux horaires');
  
  try {
    // R√©cup√©rer un pressing existant
    const pressing = await Pressing.findOne({ status: 'approved' });
    if (!pressing) {
      throw new Error('Aucun pressing approuv√© trouv√©');
    }
    console.log(`üìç Pressing utilis√©: ${pressing.businessName}`);

    // Cr√©er des cr√©neaux pour demain
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);

    const timeSlots = [
      {
        pressing: pressing._id,
        date: tomorrow,
        startTime: '09:00',
        endTime: '10:00',
        maxCapacity: 3,
        slotType: 'regular'
      },
      {
        pressing: pressing._id,
        date: tomorrow,
        startTime: '10:00',
        endTime: '11:00',
        maxCapacity: 5,
        slotType: 'express'
      },
      {
        pressing: pressing._id,
        date: tomorrow,
        startTime: '14:00',
        endTime: '15:00',
        maxCapacity: 2,
        slotType: 'premium'
      }
    ];

    const createdSlots = await TimeSlot.insertMany(timeSlots);
    console.log(`‚úÖ ${createdSlots.length} cr√©neaux cr√©√©s avec succ√®s`);
    
    // Afficher les cr√©neaux cr√©√©s
    createdSlots.forEach(slot => {
      console.log(`   - ${slot.startTime}-${slot.endTime} (${slot.slotType}, capacit√©: ${slot.maxCapacity})`);
    });

    return { pressing, timeSlots: createdSlots };
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des cr√©neaux:', error.message);
    throw error;
  }
}

async function testAppointmentCreation(pressing, timeSlots) {
  console.log('\nüß™ Test 2: Cr√©ation de rendez-vous');
  
  try {
    // R√©cup√©rer un client existant
    const client = await Client.findOne();
    if (!client) {
      throw new Error('Aucun client trouv√©');
    }
    console.log(`üë§ Client utilis√©: ${client.firstName} ${client.lastName}`);

    // Cr√©er un rendez-vous sur le premier cr√©neau
    const selectedSlot = timeSlots[0];
    
    const appointmentData = {
      client: client._id,
      pressing: pressing._id,
      timeSlot: selectedSlot._id,
      services: [
        {
          service: new mongoose.Types.ObjectId(), // Service fictif pour le test
          quantity: 2,
          unitPrice: 2000,
          totalPrice: 4000
        }
      ],
      totalAmount: 4000,
      notes: 'Test de cr√©ation de rendez-vous automatis√©',
      pickupAddress: {
        street: '123 Rue de Test',
        city: 'Abidjan',
        coordinates: {
          latitude: 5.3364,
          longitude: -4.0267
        }
      }
    };

    const appointment = new Appointment(appointmentData);
    await appointment.save();
    
    console.log(`‚úÖ Rendez-vous cr√©√© avec succ√®s`);
    console.log(`   - ID: ${appointment._id}`);
    console.log(`   - Date: ${appointment.appointmentDate}`);
    console.log(`   - Statut: ${appointment.status}`);
    console.log(`   - Montant: ${appointment.totalAmount} FCFA`);

    return appointment;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du rendez-vous:', error.message);
    throw error;
  }
}

async function testSlotAvailability(pressing, timeSlots) {
  console.log('\nüß™ Test 3: V√©rification de la disponibilit√© des cr√©neaux');
  
  try {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);

    // R√©cup√©rer les cr√©neaux disponibles
    const availableSlots = await TimeSlot.find({
      pressing: pressing._id,
      date: tomorrow,
      status: 'available'
    }).populate('pressing', 'businessName');

    console.log(`‚úÖ ${availableSlots.length} cr√©neaux disponibles trouv√©s`);
    
    availableSlots.forEach(slot => {
      const availability = slot.maxCapacity - slot.currentBookings;
      console.log(`   - ${slot.startTime}-${slot.endTime}: ${availability}/${slot.maxCapacity} places disponibles`);
    });

    // Test de la m√©thode isAvailable
    const firstSlot = timeSlots[0];
    const isAvailable = await firstSlot.isAvailable();
    console.log(`   - Premier cr√©neau disponible: ${isAvailable ? '‚úÖ' : '‚ùå'}`);

    return availableSlots;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de disponibilit√©:', error.message);
    throw error;
  }
}

async function testAppointmentWorkflow(appointment) {
  console.log('\nüß™ Test 4: Workflow complet du rendez-vous');
  
  try {
    console.log(`üìã Statut initial: ${appointment.status}`);

    // Test de confirmation
    await appointment.confirm({
      estimatedDuration: 45,
      specialInstructions: 'Traitement d√©licat requis'
    });
    console.log(`‚úÖ Rendez-vous confirm√© - Nouveau statut: ${appointment.status}`);

    // Test de mise en cours
    appointment.status = 'in_progress';
    appointment.statusHistory.push({
      status: 'in_progress',
      changedAt: new Date(),
      changedBy: appointment.pressing,
      changedByModel: 'Pressing',
      reason: 'D√©but du service'
    });
    await appointment.save();
    console.log(`‚úÖ Rendez-vous en cours - Statut: ${appointment.status}`);

    // Test de completion
    await appointment.complete({
      actualDuration: 50,
      qualityNotes: 'Service r√©alis√© avec succ√®s'
    });
    console.log(`‚úÖ Rendez-vous termin√© - Statut final: ${appointment.status}`);

    // Afficher l'historique
    console.log(`üìú Historique des statuts (${appointment.statusHistory.length} entr√©es)`);
    appointment.statusHistory.forEach((entry, index) => {
      console.log(`   ${index + 1}. ${entry.status} - ${entry.changedAt.toLocaleString()}`);
    });

    return appointment;
  } catch (error) {
    console.error('‚ùå Erreur lors du test du workflow:', error.message);
    throw error;
  }
}

async function testOrderIntegration(appointment) {
  console.log('\nüß™ Test 5: Int√©gration avec les commandes');
  
  try {
    // Cr√©er une commande li√©e au rendez-vous
    const orderData = {
      orderNumber: `COMM-${Date.now()}`,
      customer: appointment.client,
      pressing: appointment.pressing,
      items: appointment.services.map(service => ({
        service: service.service,
        pressing: appointment.pressing,
        serviceDetails: {
          name: 'Service de test',
          description: 'Service cr√©√© pour test d\'int√©gration',
          price: service.unitPrice,
          category: 'lavage'
        },
        quantity: service.quantity,
        unitPrice: service.unitPrice,
        totalPrice: service.totalPrice
      })),
      totalAmount: appointment.totalAmount,
      appointment: {
        appointmentId: appointment._id,
        appointmentDate: appointment.appointmentDate,
        timeSlot: appointment.timeSlot,
        appointmentStatus: appointment.status,
        appointmentType: 'regular',
        estimatedDuration: 60,
        appointmentNotes: 'Commande cr√©√©e via test d\'int√©gration'
      },
      delivery: {
        type: 'pickup',
        pickupAddress: appointment.pickupAddress
      }
    };

    const order = new Order(orderData);
    await order.save();

    console.log(`‚úÖ Commande cr√©√©e avec succ√®s`);
    console.log(`   - Num√©ro: ${order.orderNumber}`);
    console.log(`   - Montant: ${order.totalAmount} FCFA`);
    console.log(`   - Rendez-vous li√©: ${order.appointment.appointmentId}`);

    // Mettre √† jour le rendez-vous avec la r√©f√©rence de commande
    appointment.order = order._id;
    await appointment.save();
    
    console.log(`‚úÖ Rendez-vous mis √† jour avec la r√©f√©rence de commande`);

    return order;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'int√©gration avec les commandes:', error.message);
    throw error;
  }
}

async function testConflictManagement(pressing, timeSlots) {
  console.log('\nüß™ Test 6: Gestion des conflits de r√©servation');
  
  try {
    const client = await Client.findOne();
    const selectedSlot = timeSlots[0]; // Utiliser le m√™me cr√©neau que le premier rendez-vous

    // Essayer de cr√©er plusieurs rendez-vous sur le m√™me cr√©neau
    const conflictAppointments = [];
    
    for (let i = 0; i < selectedSlot.maxCapacity + 1; i++) {
      try {
        const appointmentData = {
          client: client._id,
          pressing: pressing._id,
          timeSlot: selectedSlot._id,
          services: [{
            service: new mongoose.Types.ObjectId(),
            quantity: 1,
            unitPrice: 1500,
            totalPrice: 1500
          }],
          totalAmount: 1500,
          notes: `Test de conflit #${i + 1}`
        };

        const appointment = new Appointment(appointmentData);
        await appointment.save();
        conflictAppointments.push(appointment);
        
        console.log(`   ‚úÖ Rendez-vous ${i + 1} cr√©√©`);
      } catch (error) {
        console.log(`   ‚ùå Rendez-vous ${i + 1} rejet√©: ${error.message}`);
      }
    }

    // V√©rifier l'√©tat final du cr√©neau
    const updatedSlot = await TimeSlot.findById(selectedSlot._id);
    console.log(`üìä √âtat final du cr√©neau:`);
    console.log(`   - Capacit√© maximale: ${updatedSlot.maxCapacity}`);
    console.log(`   - R√©servations actuelles: ${updatedSlot.currentBookings}`);
    console.log(`   - Statut: ${updatedSlot.status}`);

    return conflictAppointments;
  } catch (error) {
    console.error('‚ùå Erreur lors du test de gestion des conflits:', error.message);
    throw error;
  }
}

async function cleanupTestData() {
  console.log('\nüßπ Nettoyage des donn√©es de test');
  
  try {
    // Supprimer les donn√©es cr√©√©es pendant les tests
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);

    const deletedSlots = await TimeSlot.deleteMany({ date: tomorrow });
    const deletedAppointments = await Appointment.deleteMany({ 
      createdAt: { $gte: new Date(Date.now() - 10 * 60 * 1000) } // Derni√®res 10 minutes
    });
    const deletedOrders = await Order.deleteMany({
      orderNumber: { $regex: /^COMM-\d+$/ }
    });

    console.log(`‚úÖ Nettoyage termin√©:`);
    console.log(`   - ${deletedSlots.deletedCount} cr√©neaux supprim√©s`);
    console.log(`   - ${deletedAppointments.deletedCount} rendez-vous supprim√©s`);
    console.log(`   - ${deletedOrders.deletedCount} commandes supprim√©es`);
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error.message);
  }
}

async function runAllTests() {
  console.log('üöÄ D√©marrage des tests du syst√®me de r√©servation GeoPressCI\n');
  
  try {
    await connectToDatabase();
    
    // Test 1: Cr√©ation de cr√©neaux
    const { pressing, timeSlots } = await testTimeSlotCreation();
    
    // Test 2: Cr√©ation de rendez-vous
    const appointment = await testAppointmentCreation(pressing, timeSlots);
    
    // Test 3: V√©rification de disponibilit√©
    await testSlotAvailability(pressing, timeSlots);
    
    // Test 4: Workflow complet
    await testAppointmentWorkflow(appointment);
    
    // Test 5: Int√©gration avec commandes
    await testOrderIntegration(appointment);
    
    // Test 6: Gestion des conflits
    await testConflictManagement(pressing, timeSlots);
    
    console.log('\nüéâ Tous les tests sont termin√©s avec succ√®s !');
    console.log('\nüìã R√©sum√© des fonctionnalit√©s test√©es:');
    console.log('   ‚úÖ Cr√©ation de cr√©neaux horaires');
    console.log('   ‚úÖ Cr√©ation de rendez-vous');
    console.log('   ‚úÖ V√©rification de disponibilit√©');
    console.log('   ‚úÖ Workflow complet (confirmation ‚Üí en cours ‚Üí termin√©)');
    console.log('   ‚úÖ Int√©gration avec les commandes');
    console.log('   ‚úÖ Gestion des conflits de r√©servation');
    
  } catch (error) {
    console.error('\nüí• Erreur lors des tests:', error.message);
    console.error(error.stack);
  } finally {
    // Nettoyage des donn√©es de test
    await cleanupTestData();
    
    // Fermer la connexion
    await mongoose.connection.close();
    console.log('\nüëã Connexion ferm√©e');
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  runAllTests,
  testTimeSlotCreation,
  testAppointmentCreation,
  testSlotAvailability,
  testAppointmentWorkflow,
  testOrderIntegration,
  testConflictManagement
};
