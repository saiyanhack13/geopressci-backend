const mongoose = require('mongoose');
require('dotenv').config();

// Script de migration : Transf√©rer tous les pressings de la collection "users" vers "pressings"
async function migrateUsersToPressingCollection() {
  try {
    console.log('üöÄ D√©but de la migration des pressings de "users" vers "pressings"');
    
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/geopressci');
    console.log('‚úÖ Connexion MongoDB √©tablie');
    
    const db = mongoose.connection.db;
    
    // Collections
    const usersCollection = db.collection('users');
    const pressingsCollection = db.collection('pressings');
    
    // 1. Trouver tous les pressings dans la collection users
    console.log('\nüîç Recherche des pressings dans la collection "users"...');
    const pressingsInUsers = await usersCollection.find({ 
      role: 'pressing' 
    }).toArray();
    
    console.log(`üìä Trouv√© ${pressingsInUsers.length} pressing(s) dans la collection "users"`);
    
    if (pressingsInUsers.length === 0) {
      console.log('‚úÖ Aucun pressing √† migrer. Migration termin√©e.');
      return;
    }
    
    // 2. V√©rifier les pressings existants dans la collection pressings
    console.log('\nüîç V√©rification des pressings existants dans la collection "pressings"...');
    const existingPressings = await pressingsCollection.find({}).toArray();
    console.log(`üìä Trouv√© ${existingPressings.length} pressing(s) existant(s) dans la collection "pressings"`);
    
    // 3. Migrer chaque pressing
    let migratedCount = 0;
    let skippedCount = 0;
    
    for (const pressing of pressingsInUsers) {
      console.log(`\nüìù Traitement du pressing: ${pressing.email}`);
      
      // V√©rifier si le pressing existe d√©j√† dans la collection pressings
      const existingPressing = await pressingsCollection.findOne({ email: pressing.email });
      
      if (existingPressing) {
        console.log(`‚ö†Ô∏è Pressing ${pressing.email} existe d√©j√† dans la collection "pressings". Ignor√©.`);
        skippedCount++;
        continue;
      }
      
      // Pr√©parer les donn√©es pour la migration
      const pressingData = {
        // Champs de base
        nom: pressing.nom,
        prenom: pressing.prenom,
        email: pressing.email,
        password: pressing.password,
        phone: pressing.phone || pressing.telephone,
        role: 'pressing',
        
        // Champs sp√©cifiques au pressing
        businessName: pressing.businessName || pressing.nomCommerce || `Pressing ${pressing.nom}`,
        businessPhone: pressing.businessPhone || pressing.phone || pressing.telephone,
        
        // Adresse avec structure correcte
        address: pressing.address || {
          street: pressing.adresse || 'Adresse non sp√©cifi√©e',
          city: pressing.ville || 'Abidjan',
          district: pressing.quartier || 'Abidjan',
          postalCode: pressing.codePostal || '00225',
          country: pressing.pays || 'C√¥te d\'Ivoire',
          coordinates: pressing.coordinates || {
            type: 'Point',
            coordinates: [-4.0267, 5.3364] // Coordonn√©es par d√©faut Cocody
          },
          formattedAddress: pressing.adresse || 'Adresse non sp√©cifi√©e'
        },
        
        // Description
        description: pressing.description || `Pressing ${pressing.businessName || pressing.nomCommerce || pressing.nom}`,
        
        // Horaires par d√©faut
        businessHours: pressing.businessHours || [
          { day: 'lundi', open: '08:00', close: '18:00', isClosed: false },
          { day: 'mardi', open: '08:00', close: '18:00', isClosed: false },
          { day: 'mercredi', open: '08:00', close: '18:00', isClosed: false },
          { day: 'jeudi', open: '08:00', close: '18:00', isClosed: false },
          { day: 'vendredi', open: '08:00', close: '18:00', isClosed: false },
          { day: 'samedi', open: '08:00', close: '16:00', isClosed: false },
          { day: 'dimanche', open: '00:00', close: '00:00', isClosed: true }
        ],
        
        // Services
        services: pressing.services || [],
        
        // Options de livraison par d√©faut
        deliveryOptions: pressing.deliveryOptions || {
          isAvailable: false,
          freeDeliveryThreshold: 10000,
          deliveryFee: 1000,
          maxDeliveryDistance: 10,
          estimatedDeliveryTime: 120
        },
        
        // √âvaluations
        rating: pressing.rating || {
          average: 0,
          count: 0,
          totalScore: 0
        },
        
        // Abonnement
        subscription: pressing.subscription || {
          plan: 'trial',
          status: 'trialing',
          startDate: new Date(),
          endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 jours
          autoRenew: false
        },
        
        // V√©rification
        verification: pressing.verification || {
          status: 'pending',
          documents: []
        },
        
        // Param√®tres
        settings: pressing.settings || {
          notifications: {
            email: true,
            sms: true,
            push: true
          },
          privacy: {
            showPhone: true,
            showEmail: false
          }
        },
        
        // Statut
        status: pressing.status || 'pending',
        isActive: pressing.isActive !== false,
        isVerified: pressing.isVerified || false,
        
        // M√©tadonn√©es
        createdAt: pressing.createdAt || new Date(),
        updatedAt: pressing.updatedAt || new Date(),
        lastLogin: pressing.lastLogin
      };
      
      try {
        // Ins√©rer dans la collection pressings
        await pressingsCollection.insertOne(pressingData);
        console.log(`‚úÖ Pressing ${pressing.email} migr√© avec succ√®s`);
        migratedCount++;
        
        // Supprimer de la collection users
        await usersCollection.deleteOne({ _id: pressing._id });
        console.log(`üóëÔ∏è Pressing supprim√© de la collection "users"`);
        
      } catch (error) {
        console.error(`‚ùå Erreur lors de la migration du pressing ${pressing.email}:`, error.message);
      }
    }
    
    // 4. R√©sum√© de la migration
    console.log('\nüìä R√âSUM√â DE LA MIGRATION');
    console.log(`‚úÖ Pressings migr√©s avec succ√®s: ${migratedCount}`);
    console.log(`‚ö†Ô∏è Pressings ignor√©s (d√©j√† existants): ${skippedCount}`);
    console.log(`üìä Total trait√©: ${pressingsInUsers.length}`);
    
    // 5. V√©rification finale
    console.log('\nüîç V√©rification finale...');
    const remainingPressingsInUsers = await usersCollection.countDocuments({ role: 'pressing' });
    const totalPressingsInPressings = await pressingsCollection.countDocuments({});
    
    console.log(`üìä Pressings restants dans "users": ${remainingPressingsInUsers}`);
    console.log(`üìä Total pressings dans "pressings": ${totalPressingsInPressings}`);
    
    if (remainingPressingsInUsers === 0) {
      console.log('üéâ Migration termin√©e avec succ√®s ! Tous les pressings ont √©t√© transf√©r√©s.');
    } else {
      console.log('‚ö†Ô∏è Il reste des pressings dans la collection "users". V√©rifiez les erreurs ci-dessus.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîö Connexion MongoDB ferm√©e');
  }
}

// Fonction pour nettoyer les scripts et fichiers temporaires
async function cleanupTemporaryFiles() {
  console.log('\nüßπ Nettoyage des fichiers temporaires...');
  
  const fs = require('fs').promises;
  const path = require('path');
  
  const filesToDelete = [
    'migrate-pressing-user.js',
    'test-pressing-registration.js',
    'debug-db.js'
  ];
  
  for (const file of filesToDelete) {
    try {
      const filePath = path.join(__dirname, file);
      await fs.unlink(filePath);
      console.log(`üóëÔ∏è Fichier supprim√©: ${file}`);
    } catch (error) {
      if (error.code !== 'ENOENT') {
        console.log(`‚ö†Ô∏è Impossible de supprimer ${file}: ${error.message}`);
      }
    }
  }
}

// Ex√©cution du script
if (require.main === module) {
  console.log('üöÄ MIGRATION USERS ‚Üí PRESSINGS');
  console.log('================================');
  
  migrateUsersToPressingCollection()
    .then(() => {
      console.log('\nüßπ Nettoyage des fichiers temporaires...');
      return cleanupTemporaryFiles();
    })
    .then(() => {
      console.log('\nüéâ MIGRATION TERMIN√âE AVEC SUCC√àS !');
      console.log('‚úÖ Tous les pressings utilisent maintenant la collection "pressings"');
      console.log('‚úÖ Plus aucune d√©pendance √† la collection "users" pour les pressings');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå ERREUR LORS DE LA MIGRATION:', error);
      process.exit(1);
    });
}

module.exports = { migrateUsersToPressingCollection };
